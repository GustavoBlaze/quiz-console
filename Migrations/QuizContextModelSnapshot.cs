// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Quiz.Models;

#nullable disable

namespace quiz_console.Migrations
{
    [DbContext(typeof(QuizContext))]
    partial class QuizContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.3");

            modelBuilder.Entity("Quiz.Models.Alternative", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("askId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("content")
                        .HasColumnType("TEXT");

                    b.Property<bool>("isCorrect")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("askId");

                    b.ToTable("alternatives");
                });

            modelBuilder.Entity("Quiz.Models.Answer", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("alternativeId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("askId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("quizResponseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("alternativeId");

                    b.HasIndex("askId");

                    b.HasIndex("quizResponseId");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("Quiz.Models.Ask", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("content")
                        .HasColumnType("TEXT");

                    b.Property<long>("quizId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("quizId");

                    b.ToTable("asks");
                });

            modelBuilder.Entity("Quiz.Models.Category", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("Quiz.Models.CategoryQuiz", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("categoryId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("quizId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("categoryId");

                    b.HasIndex("quizId");

                    b.ToTable("categoryQuizzes");
                });

            modelBuilder.Entity("Quiz.Models.Quiz", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.Property<string>("userId")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("quizzes");
                });

            modelBuilder.Entity("Quiz.Models.QuizResponse", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("Quizid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("guestId")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("Quizid");

                    b.HasIndex("guestId");

                    b.ToTable("QuizResponse");
                });

            modelBuilder.Entity("Quiz.Models.User", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Quiz.Models.Alternative", b =>
                {
                    b.HasOne("Quiz.Models.Ask", "ask")
                        .WithMany("alternatives")
                        .HasForeignKey("askId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ask");
                });

            modelBuilder.Entity("Quiz.Models.Answer", b =>
                {
                    b.HasOne("Quiz.Models.Alternative", "alternative")
                        .WithMany()
                        .HasForeignKey("alternativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quiz.Models.Ask", "ask")
                        .WithMany()
                        .HasForeignKey("askId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quiz.Models.QuizResponse", "quizResponse")
                        .WithMany("answers")
                        .HasForeignKey("quizResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("alternative");

                    b.Navigation("ask");

                    b.Navigation("quizResponse");
                });

            modelBuilder.Entity("Quiz.Models.Ask", b =>
                {
                    b.HasOne("Quiz.Models.Quiz", "quiz")
                        .WithMany()
                        .HasForeignKey("quizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("quiz");
                });

            modelBuilder.Entity("Quiz.Models.CategoryQuiz", b =>
                {
                    b.HasOne("Quiz.Models.Category", "category")
                        .WithMany()
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quiz.Models.Quiz", "quiz")
                        .WithMany("categoryQuizzes")
                        .HasForeignKey("quizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");

                    b.Navigation("quiz");
                });

            modelBuilder.Entity("Quiz.Models.Quiz", b =>
                {
                    b.HasOne("Quiz.Models.User", "user")
                        .WithMany("quizzes")
                        .HasForeignKey("userId");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Quiz.Models.QuizResponse", b =>
                {
                    b.HasOne("Quiz.Models.Quiz", null)
                        .WithMany("quizzesResponses")
                        .HasForeignKey("Quizid");

                    b.HasOne("Quiz.Models.User", "guest")
                        .WithMany("quizzesResponses")
                        .HasForeignKey("guestId");

                    b.Navigation("guest");
                });

            modelBuilder.Entity("Quiz.Models.Ask", b =>
                {
                    b.Navigation("alternatives");
                });

            modelBuilder.Entity("Quiz.Models.Quiz", b =>
                {
                    b.Navigation("categoryQuizzes");

                    b.Navigation("quizzesResponses");
                });

            modelBuilder.Entity("Quiz.Models.QuizResponse", b =>
                {
                    b.Navigation("answers");
                });

            modelBuilder.Entity("Quiz.Models.User", b =>
                {
                    b.Navigation("quizzes");

                    b.Navigation("quizzesResponses");
                });
#pragma warning restore 612, 618
        }
    }
}
